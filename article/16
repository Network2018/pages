<!-- build time:Tue May 01 2018 19:40:15 GMT+0800 (中国标准时间) --><!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><meta content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0" name="viewport"><link href="https://static.sometimesnaive.org:9004/deps/imgs/favicon.ico" type="image/x-icon" rel="icon"><title>本博客 Nginx 配置（系列二） 性能篇 | 南琴浪博客</title><link href="https://static.sometimesnaive.org:9004/deps/css/style.min.css" type="text/css" rel="stylesheet"><script src="https://static.sometimesnaive.org:9004/deps/js/jquery.min.js" type="application/javascript"></script><link href="https://static.sometimesnaive.org:9004/deps/css/nprogress.min.css" type="text/css" rel="stylesheet"><script src="https://static.sometimesnaive.org:9004/deps/js/nprogress.min.js" type="application/javascript"></script><link href="https://static.sometimesnaive.org:9004/deps/css/prism.min.css" type="text/css" rel="stylesheet"><script src="https://static.sometimesnaive.org:9004/deps/js/prism.min.js" type="application/javascript"></script><link href="https://static.sometimesnaive.org:9004/deps/css/gitment.min.css" type="text/css" rel="stylesheet"><script src="https://static.sometimesnaive.org:9004/deps/js/gitment.min.js" type="application/javascript"></script></head><body><header class="header fixed-header"><div class="header-container"><a class="home-link" href="/">南琴浪博客</a><ul class="right-list"><li class="list-item"><a href="/" class="item-link">Home</a></li><li class="list-item"><a href="/archive/" class="item-link">Archive</a></li><li class="list-item"><a href="/portal/feed" class="item-link">RSS</a></li><li class="list-item"><a href="/portal/friendly-links" class="item-link">Links</a></li></ul><div class="menu-mask"><ul class="menu-list"><li class="menu-item"><a href="/" class="menu-link">Home</a></li><li class="menu-item"><a href="/archive/" class="menu-link">Archive</a></li><li class="menu-item"><a href="/portal/feed" class="menu-link">RSS</a></li><li class="menu-item"><a href="/portal/friendly-links" class="menu-link">Links</a></li></ul></div></div></header><div id="article-banner"><h2>本博客 Nginx 配置（系列二） 性能篇</h2><p class="post-date">10/29/2017</p></div><main class="app-body flex-box"><article class="post-article"><section class="markdown-content"><p>在之前的文章 <a href="https://sometimesnaive.org/article/12">本博客 Nginx 配置（系列一） 安全篇</a> 中，我介绍了本博客的 Nginx 配置中与安全相关的项目。这篇帖子会继续介绍与站点性能相关的条目。<br><a id="more"></a></p><h2 id="TCP-优化"><a href="#TCP-优化" class="headerlink" title="TCP 优化"></a>TCP 优化</h2><pre><code class="language-nginx">http {
    sendfile    on;
    tcp_nopush  on;
    tcp_nodelay on;
    keepalive_timeout 60;
}

server {
    listen 443 fastopen=3 reuseport;
}
</code></pre><p><code>sendfile</code> 可以提高 Nginx 静态资源管理效率，它是一个系统调用，直接在内核空间完成文件发送，不需要先 read 再 write，没有上下文切换开销。</p><p><code>tcp_nopush</code> 是 FreeBSD 的一个 socket 选项，对应于 Linux 的 tcp_cork，Nginx 中统一用 tcp_nopush 控制，且只有在启用了 sendfile 后才会生效。启用它后，数据包会累计到一定大小后才会发送，减小额外开销，提高网络效率。</p><p><code>tcp_nodelay</code> 也是一个 socket 选项，启用后会禁用 Nagle 算法，尽快发送数据。Nginx 只会针对处于 keep-alive 状态的 TCP 连接启用 tcp_nodelay。</p><p>然后你会发现，一个要等数据包累积到一定大小才发送，另一个要尽快发送，这不是矛盾的吗？事实是，这俩是可以叠加的，最终结果是：先填满包，然后尽快发送。</p><p><code>keepalive_timeout</code> 用于指定服务端每个 TCP 连接的最大保持连接时间。Nginx 默认是 75 秒，而有的浏览器最多只保持 60 秒，所以我设置为 60。</p><p><code>fastopen=3</code> 用于指定开启 Tcp Fast Open。设置这项的值为 3，表示只允许 3 个未经三次握手的 TCP 连接进行排队。超过这个限制，服务端会退化到采用普通的 TCP 握手流程。这是为了减少资源耗尽攻击：Tcp Fast Open 可以在第一次 SYN 的时候发送 HTTP 请求，而服务端会校验 Fast Open Cookie（FOC），如果通过就开始处理请求。如果不加限制，恶意客户端可以利用合法的 FOC 发送大量请求耗光服务端资源。关于 Tcp Fast Open 的更多信息，可以参看 <a href="https://www.rfc-editor.org/rfc/rfc7413.txt">RFC7413</a>。</p><p><code>reuseport</code> Nginx 在 1.9.1 版本中加入了 reuseport 功能，表示 Nginx 开始支持 TCP 的 so_reuseport 选项。关于这部分，可参看 <a href="http://nginx.com/blog/socket-sharding-nginx-release-1-9-1">官方文档</a></p><h2 id="Gzip-压缩"><a href="#Gzip-压缩" class="headerlink" title="Gzip 压缩"></a>Gzip 压缩</h2><pre><code class="language-nginx">http {
    gzip           on;
    gzip_vary  on;
    gzip_min_length 1000;
    gzip_buffers        16 10k;
    gzip_comp_level 3;
    gzip_proxied   any;
    gzip_types      text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;
    gzip_disable  &quot;msie6&quot;;
    gzip_http_version 1.0;
}
</code></pre><p>关于 gzip 压缩的更多说明，可以看我的 <a href="https://sometimesnaive.org/article/40">这篇帖子</a></p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存是很常见的优化手段，缓存手段也很多，本文列举出本博客使用的几种方案：</p><h3 id="proxy-cache"><a href="#proxy-cache" class="headerlink" title="proxy_cache"></a>proxy_cache</h3><p>用于对 <code>proxy_pass</code> 的缓存</p><pre><code class="language-nginx">http {
    proxy_cache_path  /home/nginx/proxy_cache/cache levels=1:2 keys_zone=proxycache:60m max_size=120m inactive=2h use_temp_path=on;
    proxy_temp_path   /home/nginx/proxy_cache/temp;
    proxy_cache_key   $host$uri;
}

server {
    ...
    location / {
        proxy_cache          proxycache;
        proxy_cache_valid 304 2h;
        proxy_cache_valid 404 2h;
        proxy_cache_lock  on;
        proxy_cache_lock_timeout 5s;
        proxy_cache_use_stale updating error timeout invalid_header http_500 http_502;
    }
}
</code></pre><p>首先在全局配置 <code>http</code> 块内配置 proxy_cache 的路径（path）、空间名（keys_zone）、缓存上限、生成 key 规则，然后在站点配置中需要使用 proxy_cache 进行剩下的配置。上面我以 location / 作为示例。关于 proxy_cache 的更多说明，可以看我的 <a href="https://sometimesnaive.org/article/36">这篇文章</a></p><h3 id="open-file-cache"><a href="#open-file-cache" class="headerlink" title="open_file_cache"></a>open_file_cache</h3><p>缓存被频繁访问的文件相关的信息</p><pre><code class="language-nginx">open_file_cache                      max=2048 inactive=1d;
open_file_cache_valid             1d;
open_file_cache_min_uses    5;
open_file_cache_errors          off;
</code></pre><p>其中：</p><ul><li><code>max</code> 缓存中的最大文件描述符数量</li><li><code>inactive</code> 存活时间，经过多长时间文件没被请求后清理缓存</li><li><code>min_uses</code>在 inactive 时间段内，日志文件使用次数小于该值后，清理缓存</li><li><code>valid</code> 缓存的有效信息的检查频率</li></ul><h3 id="HTTP-强缓存"><a href="#HTTP-强缓存" class="headerlink" title="HTTP 强缓存"></a>HTTP 强缓存</h3><p>有一种缓存机制是，服务端通过响应头告诉浏览器，在哪个时间点之前（Expires），或在多长时间之内（Cache-Control: Max-age=…），不要再请求服务器了。这个机制通常称之为 HTTP <code>强缓存</code>。</p><p>一旦资源被判强缓存规则后，再次访问资源会完全没有 HTTP 请求（Chrome 开发者工具的 Network 面板依然会显示请求，但会注明 from cache；Firefox 的 Firebug 也类似，会注明 BFCache），这能够大幅提升性能。所以我们一般会对 CSS、JS、IMG 等资源使用强缓存。</p><p>开启强缓存，需要配置如下：</p><pre><code class="language-nginx">location ~ ^/static/ {
    root       /home/site/static;
    etag      on;
    expires 2h;
}
</code></pre><h2 id="HTTPS-优化"><a href="#HTTPS-优化" class="headerlink" title="HTTPS 优化"></a>HTTPS 优化</h2><pre><code class="language-nginx">ssl_session_tickets       on;
ssl_session_ticket_key  ~/ssl_session_ticket.key;
ssl_session_cache       shared:SSL:10m;
ssl_session_timeout     10m;

ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate   ~/ocsp.cer;
resolver 208.67.222.222 valid=300s;
resolver_timeout 5s;
</code></pre><p>这部分配置包含两部分内容：<code>TLS 会话恢复</code> 和 <code>OCSP Stapling</code></p><p>关于 OCSP Stapling，可以参看 <a href="https://sometimesnaive.org/article/13">我的这篇文章</a></p><p>TLS 会话恢复的目的是简化 TLS 握手，它包含两种方案：<code>Session Cache</code> 和 <code>Session Ticket</code>，这俩都是将之前握手的 Session 存起来，供后续连接使用。</p><p>所不同的是，Session Cache 将缓存丢在服务端，占用服务端资源；而 Session Ticket 丢在客户端，不占用服务端资源，而是对客户端提出缓存要求，这对客户端浏览器的兼容性提出了要求。目前主流浏览器普遍支持 Session Cache，而 Session Ticket 的支持度较一般。</p><p>在以上配置中，出现了一个 <code>ssl_session_ticket.key</code>，这个文件是用于让多台机器使用相同的 key 文件，否则 Nginx 会使用随机生成的 key 文件，无法复用 Session Ticket，降低性能。对于单服务器站点，此文件无需配置。可执行以下指令生成该文件：</p><pre><code class="language-bash">openssl rand 48 &gt; ssl_session_ticket.key
</code></pre><p>至此，本博客 Nginx 配置（系列二）之优化篇，就告一段落了。当然本文中还有些地方没有点的很细的，会在之后的完整篇中进行注释。</p></section><br><div class="article-footer"><br><p>本文可能过时失效，若需更新，请留言</p><p>本博客文章均为原创，转载请注明来源</p></div><div class="nav-container"><a class="nav-right" href="/article/15">Certificate Transparency 概述 <span class="nav-arrow">→</span> </a><a class="nav-left" href="/article/17"><span class="nav-arrow">← </span>使用 Cloudflare PageRules 实现强制 HTTPS 跳转和 301 重定向</a></div><div id="comments"></div></article><aside class="catalog-container"><div class="toc-main"><strong class="toc-title">Catalog</strong><ol class="toc-nav"><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#TCP-优化"><span class="toc-nav-text">TCP 优化</span></a></li><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#Gzip-压缩"><span class="toc-nav-text">Gzip 压缩</span></a></li><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#缓存"><span class="toc-nav-text">缓存</span></a><ol class="toc-nav-child"><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#proxy-cache"><span class="toc-nav-text">proxy_cache</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#open-file-cache"><span class="toc-nav-text">open_file_cache</span></a></li><li class="toc-nav-item toc-nav-level-3"><a class="toc-nav-link" href="#HTTP-强缓存"><span class="toc-nav-text">HTTP 强缓存</span></a></li></ol></li><li class="toc-nav-item toc-nav-level-2"><a class="toc-nav-link" href="#HTTPS-优化"><span class="toc-nav-text">HTTPS 优化</span></a></li></ol></div></aside></main><script>!function(){var e="https://static.sometimesnaive.org:9004/deps/imgs/banner.jpg";$("#article-banner").css({"background-image":"url("+e+")"}),$(".header").removeClass("fixed-header")}()</script><script>(function(){
    var gitmentConfig = "nanqinlang"
    if (gitmentConfig !== 'undefined') {
        var gitment = new Gitment({
            id: "16",
            owner: "nanqinlang",
            repo: "sometimesnaive.org",
            oauth: {client_id: "b0612de512484ab34c7a", client_secret: "c2bc4cd3c947097d2ccc4c16f120d50458314dd0"},
            theme: {render(state, instance){const container = document.createElement('div');container.lang="en-US";container.className='gitment-container gitment-root-container';container.appendChild(instance.renderHeader(state, instance));container.appendChild(instance.renderEditor(state, instance));container.appendChild(instance.renderComments(state, instance));container.appendChild(instance.renderFooter(state, instance));return container;}}
        })
        gitment.render(document.getElementById('comments'))
    }
})();</script><div class="scroll-top"><span class="arrow-icon"></span></div><footer class="app-footer"><p class="copyright" align="center">&copy; 2017 - 2018 南琴浪博客 <a>(sometimesnaive.org)<a></a></a></p></footer><script src="https://static.sometimesnaive.org:9004/deps/js/function.min.js" type="application/javascript"></script><script>window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)},ga.l=+new Date,ga("create","UA-108266909-1","auto"),ga("send","pageview")</script><script async src="https://www.google-analytics.com/analytics.js" type="application/javascript"></script></body></html><!-- rebuild by neat -->